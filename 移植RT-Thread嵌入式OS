嵌入式OS rt-thread在armfly V2(stm32f103ze)开发板上的移植
---
[TOC]


## 开发板硬件资源：

* 主芯片 STM32F103ze,片内集成512kB Flash、64kB RAM、1个USB、1个CAN、8个定时器、5个USART、3个ADC、2个DAC、3个SPI、2个I2C、2个I2S、1个SDIO、112个GPIO、FSMC总线（支持NOR,NAND,SRAM）。8M晶振作为MCU的时钟，32768晶振用于RTC
* 1M字节SRAM(IS61LV51216)，16M字节NOR Flash(AM29LV128ML)，128M字节NADN Flash(K9F1G08)
* 2M字节串行Flash(SST25VF016B)，256字节串行EEPROM(24LC02) 
* 1个SD/MMC卡座 
* 1个CAN2.0A/B接口 
* 2个RS232串口 
* 1个RS485接口 
* 1个USB2.0全速DEVICE接口 
* 1个USB2.0全速HOST接口 
* 1个100M/10M以太网接口 
* I2S音频CODEC（24bit，48kHz），1个立体声耳机插座，1个MIC插座，1个咪头，1个扬声器
* 3.0寸TFT真彩触摸LCD（WQVGA，400x240）
* 集成FM调频收音机模块 
* 1个红外遥控接收模块，1个红外遥控发射器
* 1个5向摇杆，1个Reset按钮、1个wakeup按钮、1个自定义按钮 
* 4个自定义LED，1个电源LED，1个音频LED 
* 1个CR1220电池座 
* 1个精密可调电阻连接到ADC输入 
* 所有的GPIO引到2.54mm间距焊盘 
* 1个DAC引出端子，1个PWM引出端子 
* 标准2.54mm间距JTAG插座 
* 2个BNC输入端子，集成双通道示波器电路，具备AC/DC切换、输入增益切换开关 
* 3种供电方式：USB电缆、外接5V电源、JTAG调试接口（J-LINK仿真器） 
* 1个电源开关，上下电时无需拔插电缆 
* 3种启动方式：用户Flash、系统存储器、SRAM
* 板子规格：14cm x 12cm 
##针对实验板修改broad.h中的宏定义：
- 确认 #define SYSCLK_FREQ_72MHz  72000000
- STM32F103RB闪存容量为128kB, 64KB SRAM
修改 #define STM32_SRAM_SIZE         64
## 16M字节NOR Flash(AM29LV128ML)
### 特点
* 单3V电源
* 33 MHz最大时钟频率(低功耗典型值5 MHz)
* 灵活,统一的擦除建筑
- 4字节块
- 32字节块
- 64字节块
- 全片擦除
* 个别部门与全球保护/撤消保护功能
- 256个32KWord(64 KB)的物理扇区
* 硬件控制的锁定保护的部门
* 灵活的编程选项
- 字节/页编程（1到256字节）
- 顺序程序模式功能

## 16Mbit NOR FLASH,AT26DF161A
### 特点  
* 单2.7V - 3.6V电源
* 串行外设接口（SPI）兼容
- 支持SPI模式0和3
* 70 MHz最大时钟频率
* 灵活,统一的擦除建筑
- 4字节块
- 32字节块
- 64字节块
- 全片擦除
* 个别部门与全球保护/撤消保护功能
- 32个64 KB的物理扇区
* 硬件控制的锁定保护的部门
* 灵活的编程选项
- 字节/页编程（1到256字节）
- 顺序程序模式功能
* 擦除/编程故障自动检测和报告
* JEDEC标准制造商和设备ID阅读方法
* 低功耗
- 5毫安有效的读电流（典型值）
– 10 µA Deep Power-down Current (Typical)
* 耐力：100,000编程/擦除周期
* 数据保存时间：20年
* 符合工业温度范围内
* 行业标准绿色（无铅/无卤化物/ RoHS标准）包装选项
- 8引脚SOIC（150 mil和200-mil宽）
- 8接触MLF（5×6毫米）

## NorFlash与NandFlash对比

作者：刘老师，华清远见嵌入式学院高级讲师。

FLASH存储器又称闪存，主要有两种：NorFlash和NandFlash，下面我们从多个角度来对比介绍一下。在实际开发中，设计者可以根据产品需求来进行闪存的合理选择。

1、接口对比

NorFlash带有通用的SRAM接口，可以轻松地挂接在CPU的地址、数据总线上，对CPU的接口要求低。NorFlash的特点是芯片内执行(XIP,eXecute In Place)，这样应用程序可以直接在flash闪存内运行，不必再把代码读到系统RAM中。如uboot中的ro段可以直接在NorFlash上运行，只需要把rw和zi段拷贝到RAM中运行即可。

NandFlash器件使用复杂的I/O口来串行地存取数据，8个引脚用来传送控制、地址和数据信息。由于时序较为复杂，所以一般CPU最好集成NAND控制器。另外由于NandFlash没有挂接在地址总线上，所以如果想用NandFlash作为系统的启动盘，就需要CPU具备特殊的功能，如s3c2410在被选择为NandFlash启动方式时会在上电时自动读取NandFlash的4k数据到地址0的SRAM中。如果CPU不具备这种特殊功能，用户不能直接运行NandFlash上的代码，那可以采取其他方式，比如好多使用NandFlash的开发板除了使用NandFlash以外，还用上了一块小的NorFlash来运行启动代码。

2、容量和成本对比

相比起NandFlash来说，NorFlash的容量要小，一般在1~16MByte左右，一些新工艺采用了芯片叠加技术可以把NorFlash的容量做得大一些。在价格方面，NorFlash相比NandFlash来说较高，如目前市场上一片4Mbyte的AM29lv320 NorFlash零售价在20元左右，而一片128MByte的k9f1g08 NandFlash零售价在30元左右。

NandFlash生产过程更为简单，NAND结构可以在给定的模具尺寸内提供更高的容量，这样也就相应地降低了价格。

3、可靠性性对比

NAND器件中的坏块是随机分布的，以前也曾有过消除坏块的努力，但发现成品率太低，代价太高，根本不划算。NAND器件需要对介质进行初始化扫描以发现坏块，并将坏块标记为不可用。在已制成的器件中，如果通过可靠的方法不能进行这项处理，将导致高故障率。而坏块问题在NorFlash上是不存在的。 
在Flash的位翻转（一个bit位发生翻转）现象上，NAND的出现几率要比NorFlash大得多。这个问题在Flash存储关键文件时是致命的，所以在使用NandFlash时建议同时使用EDC/ECC等校验算法。

4、寿命对比

在NAND闪存中每个块的最大擦写次数是一百万次，而NOR的擦写次数是十万次。闪存的使用寿命同时和文件系统的机制也有关，要求文件系统具有损耗平衡功能。

5、升级对比

NorFlash的升级较为麻烦，因为不同容量的NorFlash的地址线需求不一样，所以在更换不同容量的NorFlash芯片时不方便。通常我们会通过在电路板的地址线上做一些跳接电阻来解决这样的问题，针对不同容量的NorFlash。

而不同容量的NandFlash的接口是固定的，所以升级简单。

6、读写性能对比

写操作：任何flash器件的写入操作都只能在空或已擦除的单元内进行。NAND器件执行擦除操作是十分简单的，而NOR则要求在进行擦除前先要将目标块内所有的位都写为1。擦除NOR器件时是以64～128KB的块进行的，执行一个擦除/写入操作的时间约为5s。擦除NAND器件是以8～32KB的块进行的，执行一个擦除/写入操作最多只需要4ms。

读操作：NOR的读速度比NAND稍快一些。

7、文件系统比较

Linux系统中采用MTD来管理不同类型的Flash芯片，包括NandFlash和NorFlash。支持在Flash上运行的常用文件系统有cramfs、jffs、jffs2、yaffs、yaffs2等。cramfs文件系统是只读文件系统。如果想在Flash上实现读写操作，通常在NorFlash上我们会选取jffs及jffs2文件系统，在NandFlash上选用yaffs或yaffs2文件系统。Yaffs2文件系统支持大页（大于512字节/页）的NandFlash存储器。

### FatFs用户定义函数说明：
FatFs的移植工作量不大，用户只需要完成6个函数就可以完成工作， 分别为：disk_initialize，disk_status，disk_read，disk_write，disk_ioctl，get_fattime。
函数	功能
DSTATUS disk_initialize (
  BYTE pdrv           /* [IN] Physical drive number */
)	函数的主要功能是完成对应硬件IO驱动的初始化工作，对于我的移植来说，就是完成SPI驱动的初始化
DSTATUS disk_status (
  BYTE pdrv     /* [IN] Physical drive number */
)	获取当前硬件的状态
DRESULT disk_read (
  BYTE pdrv,     /* [IN] Physical drive number */
  BYTE* buff,    /* [OUT] Pointer to the read data buffer */
  DWORD sector,  /* [IN] Start sector number */
  UINT count     /* [IN] Number of sectros to read */
)	
这个函数FatFs会调用硬件驱动去读取若干个扇区数据到buffer中

DRESULT disk_write (
  BYTE drv,         /* [IN] Physical drive number */
  const BYTE* buff, /* [IN] Write data (may be non aligned) */
  DWORD sector,     /* [IN] Sector number to write */
  UINT count        /* [IN] Number of sectors to write */
)	这个函数FatFs会调用硬件驱动写若干个扇区
DRESULT disk_ioctl (
  BYTE pdrv,     /* [IN] Drive number */
  BYTE cmd,      /* [IN] Control command code */
  void* buff     /* [I/O] Parameter and data buffer */
)	这个函数，FatFs可以获取扇区大小，块大小，扇区个数；以及擦除扇区
DWORD get_fattime (void)	通过函数获取时间，一般情况下会使用RTC